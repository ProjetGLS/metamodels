/**
 * @file    metamodels/build.gradle
 * @author  Théo Bessel
 * @brief   Gradle configuration
 */

import org.gradle.api.tasks.options.Option;
import groovy.text.XmlTemplateEngine;

apply plugin: 'eclipse'

class EMFCodeGenTask extends DefaultTask {
    @InputDirectory
    final DirectoryProperty inputDir = project.objects.directoryProperty();

    @OutputDirectory
    final DirectoryProperty outputDir = project.objects.directoryProperty();

    @Input
    public String model;

    @Option(option = "model", description = "Configures the model from which to generate code.")
    public void setModel(String model) {
        this.model = model;
    }

    public String getModel() {
        return model;
    }

    EMFCodeGenTask() {
        inputDir.set(project.file("models"))
        outputDir.set(project.file("target"))
    }

    @TaskAction
    void generate() {
        // Generate the `model` folder into /target
        project.exec {
            workingDir "."
            commandLine "mkdir", "-p", "target/"
        }

        project.exec {
            workingDir "."
            commandLine "touch", "target/.project"
        }

        project.exec {
            workingDir "."
            commandLine "touch", "target/build.xml"
        }

        def binding = [
            project: [
                model: [
                    name: model,
                    path: project.file("models/").getPath()
                ],
                target: [
                    path: project.file("target/").getPath()
                ]
            ]
        ]

        // Generate the .project file into /target/${model}
        project.file("target/.project").text = new XmlTemplateEngine().createTemplate(project.file(".project-template").text).make(binding).toString()

        // Generate the build.xml file into /target/${model}
        project.file("target/build.xml").text = new XmlTemplateEngine().createTemplate(project.file("template-build.xml").text).make(binding).toString()

        // Generate the java code from the ecore model
        project.exec {
            workingDir "."
            commandLine "eclipse",
                "-noSplash",
                "-data", project.file("..").getPath(),
                "-application", "org.eclipse.ant.core.antRunner",
                "-buildfile", project.file("target/build.xml").getPath()
        }
    }
}

repositories {
    maven { url "https://plugins.gradle.org/m2/" }
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'org.eclipse.emf:org.eclipse.emf.common:2.21.0'
    implementation 'org.eclipse.emf:org.eclipse.emf.ecore:2.21.0'
    //implementation 'org.eclipse.emf:org.eclipse.emf.ecore.xmi:2.21.0'
}

sourceSets {
    main {
        java {
            // Ajoutez les dossiers générés au classpath
            srcDirs += [
                "target"
            ]
        }
    }
}

tasks.register("dummy", DefaultTask) {
    println "Metamodels dummy task !"
}

tasks.register("generate", EMFCodeGenTask) {
    println "Metamodels generate task !"
}